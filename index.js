import { GoogleGenAI, Type } from "@google/genai";
import "dotenv/config"; // checkout the file how just importing runs it
import { exec } from "child_process";

if (!process.env.GEMINI_API_KEY) {
  throw new Error("API key not found");
}

function executeCommand(command) {
  exec(command, (error, stdout, stderr) => {
    if (error) {
      return error;
    }
    if (stderr) {
      return stderr;
    }
    return stdout
  });
}

const executeCommandFunctionDeclaration = {
  name: "execute_command",
  description:
    "Executes a linux command on user's local machine. The command can be used to create files, folders, add content inside files, etc",
  parameters: {
    type: Type.OBJECT,
    properties: {
      command: {
        type: Type.STRING,
        description: "The linux command",
      },
    },
    required: ["command"],
  },
};

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

const config = {
  tools: [
    {
      functionDeclarations: [executeCommandFunctionDeclaration],
    },
  ],
};

const contents = [
  {
    role: "user",
    // segments of messages exchanged with AI
    parts: [
      {
        text: "create fully working todo app using HTML, CSS & JS in a new todo_app directory.",
      },
    ],
  },
];

while (true) {
  const response = await ai.models.generateContent({
    model: "gemini-2.0-flash",
    contents: contents,
    config: config,
  });

  if (
    response.functionCalls &&
    response.functionCalls?.[0].name === "execute_command"
  ) {
    const functionResponseParts = [];
    for (const tool_call of response.functionCalls) {
      const command = tool_call.args.command;
      console.log(`executing command: "${command}"`);

      const result = executeCommand(command);

      functionResponseParts.push({
        name: tool_call.name,
        response: { result },
      });
    }

    // candidates are possible responses generated by AI
    contents.push(response.candidates[0].content);

    contents.push({
      role: "user",
      parts: functionResponseParts.map((part) => ({ functionResponse: part })),
    });

  } else {
    console.log("final response: ", response.text);
    break;
  }
}
